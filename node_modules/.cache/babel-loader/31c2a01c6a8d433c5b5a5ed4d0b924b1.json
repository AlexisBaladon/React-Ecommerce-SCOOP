{"ast":null,"code":"var _jsxFileName = \"F:\\\\reactApp\\\\heladeria-e-commerce-baladon\\\\src\\\\context\\\\cartContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/React.createContext({\n  items: [],\n  addItem: it => {},\n  deleteItem: it => {},\n  deleteAllItems: () => {},\n  isInCart: (id, pd) => false,\n  hasStock: (id, productCount) => false\n});\n\nconst CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [cartItems, setCartItems] = useState([]);\n\n  const addItem = newItem => {\n    if (cartItems.some(it => it.sameProductAs(newItem))) {\n      throw new Error('Este item ya ha sido agregado previamente!');\n    } else {\n      let cartItemsAux = cartItems;\n      cartItemsAux.push(newItem);\n      setCartItems(cartItemsAux);\n    }\n  };\n\n  const deleteItem = deletedItem => {\n    setCartItems(cartItems.filter(it => {\n      return !(it.equals(deletedItem) && it.sameProductAs(deletedItem));\n    }));\n  };\n\n  const deleteAllItems = () => {\n    setCartItems([]);\n  };\n\n  const isInCart = (itemId, productDetail) => {\n    return cartItems.some(it => it.id === itemId && it.sameDetails(productDetail));\n  };\n\n  const hasStock = (id, productCount) => {\n    let conditionItems = 0;\n    cartItems.forEach(ci => {\n      if (ci.id === id) conditionItems++;\n    });\n    return conditionItems > productCount;\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      items: cartItems,\n      addItem: addItem,\n      deleteItem: deleteItem,\n      deleteAllItems: deleteAllItems,\n      isInCart: isInCart,\n      hasStock: hasStock\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"jeyeRm/hZ/3zvXF4PAYTLSHDNRs=\");\n\n_c = CartProvider;\nexport { CartProvider, CartContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["F:/reactApp/heladeria-e-commerce-baladon/src/context/cartContext.tsx"],"names":["React","useState","CartContext","createContext","items","addItem","it","deleteItem","deleteAllItems","isInCart","id","pd","hasStock","productCount","CartProvider","children","cartItems","setCartItems","newItem","some","sameProductAs","Error","cartItemsAux","push","deletedItem","filter","equals","itemId","productDetail","sameDetails","conditionItems","forEach","ci"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAMA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAUjB;AAACC,EAAAA,KAAK,EAAE,EAAR;AACCC,EAAAA,OAAO,EAAGC,EAAD,IAAiB,CAAE,CAD7B;AAECC,EAAAA,UAAU,EAAGD,EAAD,IAAiB,CAAE,CAFhC;AAGCE,EAAAA,cAAc,EAAE,MAAM,CAAE,CAHzB;AAICC,EAAAA,QAAQ,EAAE,CAACC,EAAD,EAAaC,EAAb,KAAmC,KAJ9C;AAKCC,EAAAA,QAAQ,EAAE,CAACF,EAAD,EAAaG,YAAb,KAAsC;AALjD,CAViB,CAApB;;AAmBA,MAAMC,YAA0B,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACjD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAe,EAAf,CAA1C;;AAEA,QAAMI,OAAO,GAAIa,OAAD,IAA+B;AAC7C,QAAIF,SAAS,CAACG,IAAV,CAAeb,EAAE,IAAIA,EAAE,CAACc,aAAH,CAAiBF,OAAjB,CAArB,CAAJ,EAAqD;AACnD,YAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACD,KAFD,MAGK;AACH,UAAIC,YAAY,GAAGN,SAAnB;AACAM,MAAAA,YAAY,CAACC,IAAb,CAAkBL,OAAlB;AACAD,MAAAA,YAAY,CAACK,YAAD,CAAZ;AACD;AACF,GATD;;AAWA,QAAMf,UAAU,GAAIiB,WAAD,IAAmC;AACpDP,IAAAA,YAAY,CAACD,SAAS,CAACS,MAAV,CAAkBnB,EAAD,IAAoB;AAChD,aAAO,EAAEA,EAAE,CAACoB,MAAH,CAAUF,WAAV,KAA0BlB,EAAE,CAACc,aAAH,CAAiBI,WAAjB,CAA5B,CAAP;AACD,KAFY,CAAD,CAAZ;AAGD,GAJD;;AAMA,QAAMhB,cAAc,GAAG,MAAY;AACjCS,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,GAFD;;AAIA,QAAMR,QAAQ,GAAG,CAACkB,MAAD,EAAiBC,aAAjB,KAA2D;AAC1E,WAAOZ,SAAS,CAACG,IAAV,CAAgBb,EAAD,IAAQA,EAAE,CAACI,EAAH,KAAUiB,MAAV,IAAoBrB,EAAE,CAACuB,WAAH,CAAeD,aAAf,CAA3C,CAAP;AACD,GAFD;;AAIA,QAAMhB,QAAQ,GAAG,CAACF,EAAD,EAAaG,YAAb,KAA+C;AAC9D,QAAIiB,cAAc,GAAG,CAArB;AACAd,IAAAA,SAAS,CAACe,OAAV,CAAmBC,EAAD,IAAQ;AACxB,UAAIA,EAAE,CAACtB,EAAH,KAAUA,EAAd,EAAkBoB,cAAc;AACjC,KAFD;AAGA,WAAOA,cAAc,GAAGjB,YAAxB;AACD,GAND;;AAQA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAACT,MAAAA,KAAK,EAAEY,SAAR;AACCX,MAAAA,OAAO,EAAEA,OADV;AAECE,MAAAA,UAAU,EAACA,UAFZ;AAGCC,MAAAA,cAAc,EAAEA,cAHjB;AAICC,MAAAA,QAAQ,EAAEA,QAJX;AAKCG,MAAAA,QAAQ,EAAEA;AALX,KADT;AAAA,cAQGG;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAhDD;;GAAMD,Y;;KAAAA,Y;AAkDN,SAAQA,YAAR,EAAqBZ,WAArB","sourcesContent":["import React, { useState } from 'react'\r\nimport Category from '../dataTypes/category';\r\n\r\nimport ItemTicket from '../dataTypes/itemTicket';\r\nimport ProductDetail from '../dataTypes/ProductDetail';\r\n\r\nconst CartContext = React.createContext<{\r\n    items: ItemTicket[],\r\n    addItem(it: ItemTicket): void,\r\n    deleteItem(it: ItemTicket): void, \r\n    deleteAllItems(): void, \r\n    isInCart(id: number, pd: ProductDetail): boolean,\r\n    hasStock(id: number, productCount: number): boolean,\r\n  }>\r\n\r\n  //default values                                    \r\n  ({items: [],\r\n    addItem: (it:ItemTicket)=>{},\r\n    deleteItem: (it:ItemTicket)=>{},\r\n    deleteAllItems: () => {},\r\n    isInCart: (id: number, pd: ProductDetail) => false,\r\n    hasStock: (id: number, productCount: number) => false,\r\n  });\r\n\r\n\r\nconst CartProvider: React.FC<{}> = ({children}) => {\r\n  const [cartItems, setCartItems] = useState<ItemTicket[]>([]);\r\n\r\n  const addItem = (newItem: ItemTicket): void => {\r\n    if (cartItems.some(it => it.sameProductAs(newItem))) {\r\n      throw new Error('Este item ya ha sido agregado previamente!');\r\n    }\r\n    else {\r\n      let cartItemsAux = cartItems;\r\n      cartItemsAux.push(newItem)\r\n      setCartItems(cartItemsAux);\r\n    }\r\n  }\r\n\r\n  const deleteItem = (deletedItem: ItemTicket): void => {\r\n    setCartItems(cartItems.filter((it: ItemTicket) => {\r\n      return !(it.equals(deletedItem) && it.sameProductAs(deletedItem));\r\n    }));\r\n  }\r\n\r\n  const deleteAllItems = (): void => {\r\n    setCartItems([]);\r\n  }\r\n\r\n  const isInCart = (itemId: number, productDetail: ProductDetail): boolean => {\r\n    return cartItems.some((it) => it.id === itemId && it.sameDetails(productDetail));\r\n  }\r\n\r\n  const hasStock = (id: number, productCount: number): boolean => {\r\n    let conditionItems = 0;\r\n    cartItems.forEach((ci) => {\r\n      if (ci.id === id) conditionItems++;\r\n    })\r\n    return conditionItems > productCount;\r\n  }\r\n\r\n  return (\r\n    <CartContext.Provider \r\n      value={{items: cartItems,\r\n              addItem: addItem, \r\n              deleteItem:deleteItem,\r\n              deleteAllItems: deleteAllItems, \r\n              isInCart: isInCart,\r\n              hasStock: hasStock,\r\n             }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  )\r\n}\r\n\r\nexport {CartProvider,CartContext}"]},"metadata":{},"sourceType":"module"}