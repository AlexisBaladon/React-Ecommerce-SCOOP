{"ast":null,"code":"var _jsxFileName = \"F:\\\\reactApp\\\\heladeria-e-commerce-baladon\\\\src\\\\components\\\\items\\\\detail\\\\itemChoserContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getFlavors } from '../../../data/flavorHandler';\nimport ProductDetailRecipiente from '../../../dataTypes/ProductDetailRecipiente';\nimport ItemChooser from './itemChoser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ItemChoserContainer = _ref => {\n  _s();\n\n  let {\n    id,\n    setProductDetail\n  } = _ref;\n  const [flavors, setFlavors] = useState([]);\n  const [selectedFlavors, setSelectedFlavors] = useState([]);\n  useEffect(() => {\n    let isMounted = true;\n\n    const setIfMounted = flavors => {\n      if (isMounted) setFlavors(flavors);\n    };\n\n    getFlavors(setIfMounted);\n    return () => {\n      isMounted = false;\n    };\n  }, []); //update details according to flavors showed on screen\n\n  useEffect(() => {\n    //slice passes the value by copy\n    setProductDetail(new ProductDetailRecipiente(selectedFlavors.slice()));\n  }, [selectedFlavors, setProductDetail]); //Number of flavors according to item id\n\n  const numFlavorsById = new Map([[\"RzDoHkT1HVjWxrWWCoz6\", 2], //1/2 Litre\n  [\"d6UNi3yFX3kJoYWH5qkI\", 3], //1   Litre\n  [\"a5TdN0VbenQs6A9dlk1j\", 4] //2   Litre\n  ]);\n  return /*#__PURE__*/_jsxDEV(ItemChooser, {\n    maxFlavors: numFlavorsById.get(id) || 0,\n    imgWidth: 500,\n    imgHeight: 500 * 2 / 3,\n    itemId: id,\n    flavors: flavors,\n    selectedFlavors: selectedFlavors,\n    setSelectedFlavors: setSelectedFlavors\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ItemChoserContainer, \"yYfEG4ls7MYzSKlDTKOzEf8obHE=\");\n\n_c = ItemChoserContainer;\nexport default ItemChoserContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemChoserContainer\");","map":{"version":3,"sources":["F:/reactApp/heladeria-e-commerce-baladon/src/components/items/detail/itemChoserContainer.tsx"],"names":["React","useEffect","useState","getFlavors","ProductDetailRecipiente","ItemChooser","ItemChoserContainer","id","setProductDetail","flavors","setFlavors","selectedFlavors","setSelectedFlavors","isMounted","setIfMounted","slice","numFlavorsById","Map","get"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAGA,OAAOC,uBAAP,MAAoC,4CAApC;AACA,OAAOC,WAAP,MAAwB,cAAxB;;;AAOA,MAAMC,mBAAqC,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,GAA2B;AACxE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAW,EAAX,CAAtC;AACA,QAAM,CAACS,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAW,EAAX,CAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,SAAS,GAAG,IAAhB;;AAEA,UAAMC,YAAY,GAAIL,OAAD,IAAuB;AAC1C,UAAII,SAAJ,EAAeH,UAAU,CAACD,OAAD,CAAV;AAChB,KAFD;;AAIAN,IAAAA,UAAU,CAACW,YAAD,CAAV;AAEA,WAAO,MAAM;AAACD,MAAAA,SAAS,GAAG,KAAZ;AAAkB,KAAhC;AACD,GAVQ,EAUN,EAVM,CAAT,CAJwE,CAgBxE;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd;AACAO,IAAAA,gBAAgB,CAAC,IAAIJ,uBAAJ,CAA4BO,eAAe,CAACI,KAAhB,EAA5B,CAAD,CAAhB;AACD,GAHQ,EAGN,CAACJ,eAAD,EAAkBH,gBAAlB,CAHM,CAAT,CAjBwE,CAsBxE;;AACA,QAAMQ,cAAc,GAAG,IAAIC,GAAJ,CAAQ,CAC7B,CAAC,sBAAD,EAAyB,CAAzB,CAD6B,EACA;AAC7B,GAAC,sBAAD,EAAyB,CAAzB,CAF6B,EAEA;AAC7B,GAAC,sBAAD,EAAyB,CAAzB,CAH6B,CAGA;AAHA,GAAR,CAAvB;AAMA,sBACE,QAAC,WAAD;AACE,IAAA,UAAU,EAAED,cAAc,CAACE,GAAf,CAAmBX,EAAnB,KAA0B,CADxC;AAEE,IAAA,QAAQ,EAAE,GAFZ;AAGE,IAAA,SAAS,EAAE,MAAI,CAAJ,GAAM,CAHnB;AAIE,IAAA,MAAM,EAAEA,EAJV;AAKE,IAAA,OAAO,EAAEE,OALX;AAME,IAAA,eAAe,EAAEE,eANnB;AAOE,IAAA,kBAAkB,EAAEC;AAPtB;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAxCD;;GAAMN,mB;;KAAAA,mB;AA0CN,eAAeA,mBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { getFlavors } from '../../../data/flavorHandler';\r\nimport Flavor from '../../../dataTypes/flavor';\r\nimport ProductDetail from '../../../dataTypes/ProductDetail';\r\nimport ProductDetailRecipiente from '../../../dataTypes/ProductDetailRecipiente';\r\nimport ItemChooser from './itemChoser'\r\n\r\ninterface IProps {\r\n  id: string;\r\n  setProductDetail(pd: ProductDetail): any;\r\n}\r\n\r\nconst ItemChoserContainer: React.FC<IProps> = ({id, setProductDetail}) => {\r\n  const [flavors, setFlavors] = useState<Flavor[]>([]);\r\n  const [selectedFlavors, setSelectedFlavors] = useState<Flavor[]>([]);\r\n  \r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const setIfMounted = (flavors: Flavor[]) => {\r\n      if (isMounted) setFlavors(flavors);\r\n    }\r\n\r\n    getFlavors(setIfMounted);\r\n    \r\n    return () => {isMounted = false}\r\n  }, [])\r\n\r\n  //update details according to flavors showed on screen\r\n  useEffect(() => {\r\n    //slice passes the value by copy\r\n    setProductDetail(new ProductDetailRecipiente(selectedFlavors.slice()));\r\n  }, [selectedFlavors, setProductDetail])\r\n  \r\n  //Number of flavors according to item id\r\n  const numFlavorsById = new Map([\r\n    [\"RzDoHkT1HVjWxrWWCoz6\", 2], //1/2 Litre\r\n    [\"d6UNi3yFX3kJoYWH5qkI\", 3], //1   Litre\r\n    [\"a5TdN0VbenQs6A9dlk1j\", 4], //2   Litre\r\n  ])\r\n\r\n  return (\r\n    <ItemChooser \r\n      maxFlavors={numFlavorsById.get(id) || 0}\r\n      imgWidth={500}\r\n      imgHeight={500*2/3}\r\n      itemId={id}\r\n      flavors={flavors}\r\n      selectedFlavors={selectedFlavors}\r\n      setSelectedFlavors={setSelectedFlavors}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ItemChoserContainer"]},"metadata":{},"sourceType":"module"}