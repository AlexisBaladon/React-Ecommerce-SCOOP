{"ast":null,"code":"var _jsxFileName = \"F:\\\\reactApp\\\\heladeria-e-commerce-baladon\\\\src\\\\components\\\\items\\\\detail\\\\itemChoserContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getPromiseFlavors } from '../../../helpers/promises';\nimport ItemChooser from './itemChoser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ItemChoserContainer = _ref => {\n  _s();\n\n  let {\n    id\n  } = _ref;\n  const [flavors, setFlavors] = useState([]);\n  const [selectedFlavors, setSelectedFlavors] = useState([]);\n  useEffect(() => {\n    let isMounted = true;\n\n    const setIfMounted = flavors => {\n      if (isMounted) {\n        setFlavors(flavors);\n      }\n    };\n\n    getPromiseFlavors(setIfMounted);\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ItemChooser, {\n    imgWidth: 500,\n    itemId: id,\n    items: flavors,\n    selectedItems: selectedFlavors,\n    setSelectedItems: setSelectedFlavors\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ItemChoserContainer, \"lDRNZ4TZRHECmSIRebg/z972kSc=\");\n\n_c = ItemChoserContainer;\nexport default ItemChoserContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemChoserContainer\");","map":{"version":3,"sources":["F:/reactApp/heladeria-e-commerce-baladon/src/components/items/detail/itemChoserContainer.tsx"],"names":["React","useEffect","useState","getPromiseFlavors","ItemChooser","ItemChoserContainer","id","flavors","setFlavors","selectedFlavors","setSelectedFlavors","isMounted","setIfMounted"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,OAAOC,WAAP,MAAwB,cAAxB;;;AAMA,MAAMC,mBAAqC,GAAG,QAAU;AAAA;;AAAA,MAAT;AAACC,IAAAA;AAAD,GAAS;AACtD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAW,EAAX,CAAtC;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAW,EAAX,CAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,SAAS,GAAG,IAAhB;;AAEA,UAAMC,YAAY,GAAIL,OAAD,IAAuB;AAC1C,UAAII,SAAJ,EAAe;AAACH,QAAAA,UAAU,CAACD,OAAD,CAAV;AAAoB;AACrC,KAFD;;AAIAJ,IAAAA,iBAAiB,CAACS,YAAD,CAAjB;AAEA,WAAO,MAAM;AAACD,MAAAA,SAAS,GAAG,KAAZ;AAAkB,KAAhC;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,sBACE,QAAC,WAAD;AACE,IAAA,QAAQ,EAAE,GADZ;AAEE,IAAA,MAAM,EAAEL,EAFV;AAGE,IAAA,KAAK,EAAEC,OAHT;AAIE,IAAA,aAAa,EAAEE,eAJjB;AAKE,IAAA,gBAAgB,EAAEC;AALpB;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAzBD;;GAAML,mB;;KAAAA,mB;AA2BN,eAAeA,mBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Flavor from '../../../dataTypes/flavor';\r\nimport { getPromiseFlavors } from '../../../helpers/promises';\r\nimport ItemChooser from './itemChoser'\r\n\r\ninterface IProps {\r\n  id: number;\r\n}\r\n\r\nconst ItemChoserContainer: React.FC<IProps> = ({id}) => {\r\n  const [flavors, setFlavors] = useState<Flavor[]>([]);\r\n  const [selectedFlavors, setSelectedFlavors] = useState<Flavor[]>([]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const setIfMounted = (flavors: Flavor[]) => {\r\n      if (isMounted) {setFlavors(flavors)}\r\n    }\r\n\r\n    getPromiseFlavors(setIfMounted);\r\n    \r\n    return () => {isMounted = false}\r\n  }, [])\r\n\r\n  return (\r\n    <ItemChooser \r\n      imgWidth={500}\r\n      itemId={id}\r\n      items={flavors}\r\n      selectedItems={selectedFlavors}\r\n      setSelectedItems={setSelectedFlavors}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ItemChoserContainer"]},"metadata":{},"sourceType":"module"}