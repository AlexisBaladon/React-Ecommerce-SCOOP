{"ast":null,"code":"var _jsxFileName = \"F:\\\\reactApp\\\\heladeria-e-commerce-baladon\\\\src\\\\context\\\\modalContext.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContext = /*#__PURE__*/React.createContext({\n  openModal: mt => {},\n  closeModal: mt => {}\n}); //Doesn't let more than one modal to be opened at once\n\nconst ModalProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  //stores the opened state functions\n  const openedCollection = [];\n\n  const closeEverything = () => {\n    openedCollection.forEach(setOpen => {\n      setOpen(false);\n    });\n\n    while (openedCollection.pop());\n  };\n\n  const openModal = setOpenedParam => {\n    console.log(openedCollection.length);\n    closeEverything();\n    setOpenedParam(true);\n    openedCollection.push(setOpenedParam);\n  };\n\n  const closeModal = setOpenedParam => {\n    const setOpened = openedCollection.find(set => set === setOpenedParam);\n\n    if (setOpened !== undefined) {\n      setOpened(false);\n      openedCollection.filter(set => set !== setOpened);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ModalContext.Provider, {\n    value: {\n      openModal: openModal,\n      closeModal: closeModal\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ModalProvider;\nexport { ModalContext, ModalProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalProvider\");","map":{"version":3,"sources":["F:/reactApp/heladeria-e-commerce-baladon/src/context/modalContext.tsx"],"names":["React","ModalContext","createContext","openModal","mt","closeModal","ModalProvider","children","openedCollection","closeEverything","forEach","setOpen","pop","setOpenedParam","console","log","length","push","setOpened","find","set","undefined","filter"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;;AAEA,MAAMC,YAAY,gBAAGD,KAAK,CAACE,aAAN,CAMlB;AACCC,EAAAA,SAAS,EAAGC,EAAD,IAAuD,CAAE,CADrE;AAECC,EAAAA,UAAU,EAAGD,EAAD,IAAuD,CAAE;AAFtE,CANkB,CAArB,C,CAWA;;AACA,MAAME,aAA2B,GAAG,QAAgB;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAMlD;AACA,QAAMC,gBAAiE,GAAG,EAA1E;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC5BD,IAAAA,gBAAgB,CAACE,OAAjB,CAA0BC,OAAD,IAAa;AACpCA,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAFD;;AAGA,WAAMH,gBAAgB,CAACI,GAAjB,EAAN,CAA6B;AAC9B,GALD;;AAOA,QAAMT,SAAS,GAAIU,cAAD,IAAmE;AACnFC,IAAAA,OAAO,CAACC,GAAR,CAAYP,gBAAgB,CAACQ,MAA7B;AACAP,IAAAA,eAAe;AACfI,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAL,IAAAA,gBAAgB,CAACS,IAAjB,CAAsBJ,cAAtB;AACD,GALD;;AAOA,QAAMR,UAAU,GAAIQ,cAAD,IAAmE;AACpF,UAAMK,SAAS,GAAGV,gBAAgB,CAACW,IAAjB,CAAsBC,GAAG,IAAIA,GAAG,KAAKP,cAArC,CAAlB;;AACA,QAAIK,SAAS,KAAKG,SAAlB,EAA6B;AAC3BH,MAAAA,SAAS,CAAC,KAAD,CAAT;AACAV,MAAAA,gBAAgB,CAACc,MAAjB,CAAwBF,GAAG,IAAIA,GAAG,KAAKF,SAAvC;AACD;AACF,GAND;;AAQA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AAACf,MAAAA,SAAS,EAAEA,SAAZ;AACCE,MAAAA,UAAU,EAAEA;AADb,KADT;AAAA,cAIGE;AAJH;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAvCD;;KAAMD,a;AAyCN,SAAQL,YAAR,EAAsBK,aAAtB","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst ModalContext = React.createContext<{\r\n    openModal(mt: React.Dispatch<React.SetStateAction<boolean>>): void,\r\n    closeModal(mt: React.Dispatch<React.SetStateAction<boolean>>): void,\r\n  }>\r\n\r\n  //default values                                    \r\n  ({\r\n    openModal: (mt: React.Dispatch<React.SetStateAction<boolean>>) => {},\r\n    closeModal: (mt: React.Dispatch<React.SetStateAction<boolean>>) => {},\r\n  });\r\n\r\n//Doesn't let more than one modal to be opened at once\r\nconst ModalProvider: React.FC<{}> = ({children}) => {\r\n  interface IOpen {\r\n    opened: boolean;\r\n    setOpened: React.Dispatch<React.SetStateAction<boolean>>;\r\n  }\r\n\r\n  //stores the opened state functions\r\n  const openedCollection: React.Dispatch<React.SetStateAction<boolean>>[] = [];\r\n\r\n  const closeEverything = () => {\r\n    openedCollection.forEach((setOpen) => {\r\n      setOpen(false);\r\n    });\r\n    while(openedCollection.pop());\r\n  }\r\n  \r\n  const openModal = (setOpenedParam: React.Dispatch<React.SetStateAction<boolean>>) => {\r\n    console.log(openedCollection.length)\r\n    closeEverything();\r\n    setOpenedParam(true);\r\n    openedCollection.push(setOpenedParam);\r\n  }\r\n\r\n  const closeModal = (setOpenedParam: React.Dispatch<React.SetStateAction<boolean>>) => {\r\n    const setOpened = openedCollection.find(set => set === setOpenedParam);\r\n    if (setOpened !== undefined) {\r\n      setOpened(false);\r\n      openedCollection.filter(set => set !== setOpened);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ModalContext.Provider \r\n      value={{openModal: openModal,\r\n              closeModal: closeModal,\r\n             }}>\r\n      {children}\r\n    </ModalContext.Provider>\r\n  )\r\n}\r\n\r\nexport {ModalContext, ModalProvider}"]},"metadata":{},"sourceType":"module"}