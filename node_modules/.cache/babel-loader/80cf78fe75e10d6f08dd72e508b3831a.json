{"ast":null,"code":"import { collection, getDocs, getFirestore } from 'firebase/firestore';\nimport ItemShowcase from '../dataTypes/itemShowcase';\nimport { ItemHandler } from './item';\n\nclass DataLoader {\n  constructor() {\n    this.db = getFirestore();\n    this.itemCollection = collection(this.db, \"items\");\n    this.itemHandler = ItemHandler.getInstance();\n  }\n\n  static getInstance() {\n    if (!DataLoader.instance) {\n      DataLoader.instance = new DataLoader();\n    }\n\n    return DataLoader.instance;\n  }\n\n  loadData() {\n    let data = [];\n    getDocs(this.itemCollection).then(snapshot => {\n      data = snapshot.docs.map(doc => {\n        //Destructuring\n        const [id, title, description, price, pictureUrl, category, stock] = [doc.id, doc.get(\"title\"), doc.get(\"description\"), doc.get(\"price\"), doc.get(\"pictureUrl\"), doc.get(\"type\"), doc.get(\"stock\")];\n\n        if (title === undefined || description === undefined || price === undefined || pictureUrl === undefined || category === undefined || stock === undefined) {\n          console.log(id, title, description, price, pictureUrl, category, stock);\n          throw new Error(\"Parámetros de items de base de datos erroneos\");\n        } else {\n          const newItem = new ItemShowcase(id, title, description, price, pictureUrl, category, stock);\n          this.itemHandler.addItem(newItem);\n        }\n\n        console.log({\n          id: doc.id,\n          ...doc.data()\n        });\n      });\n    });\n  }\n\n}\n\nDataLoader.instance = void 0;\nexport default DataLoader;","map":{"version":3,"sources":["F:/reactApp/heladeria-e-commerce-baladon/src/data/dataLoader.ts"],"names":["collection","getDocs","getFirestore","ItemShowcase","ItemHandler","DataLoader","constructor","db","itemCollection","itemHandler","getInstance","instance","loadData","data","then","snapshot","docs","map","doc","id","title","description","price","pictureUrl","category","stock","get","undefined","console","log","Error","newItem","addItem"],"mappings":"AAAA,SAAQA,UAAR,EAAoCC,OAApC,EAA6CC,YAA7C,QAAgE,oBAAhE;AAGA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,WAAT,QAA4B,QAA5B;;AAEA,MAAMC,UAAN,CAAiB;AAOPC,EAAAA,WAAW,GAAG;AAAA,SALtBC,EAKsB,GALNL,YAAY,EAKN;AAAA,SAJtBM,cAIsB,GAJLR,UAAU,CAAC,KAAKO,EAAN,EAAS,OAAT,CAIL;AAAA,SAFtBE,WAEsB,GAFKL,WAAW,CAACM,WAAZ,EAEL;AAAG;;AAEA,SAAXA,WAAW,GAAe;AACtC,QAAI,CAACL,UAAU,CAACM,QAAhB,EAA0B;AACtBN,MAAAA,UAAU,CAACM,QAAX,GAAsB,IAAIN,UAAJ,EAAtB;AACH;;AACD,WAAOA,UAAU,CAACM,QAAlB;AACD;;AAEDC,EAAAA,QAAQ,GAAS;AACf,QAAIC,IAAI,GAAG,EAAX;AACAZ,IAAAA,OAAO,CAAC,KAAKO,cAAN,CAAP,CAA6BM,IAA7B,CAAkCC,QAAQ,IAAI;AAC5CF,MAAAA,IAAI,GAAGE,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBC,GAAG,IAAI;AAC1B;AACA,cAAM,CAACC,EAAD,EAAKC,KAAL,EAAYC,WAAZ,EAAyBC,KAAzB,EAAgCC,UAAhC,EAA4CC,QAA5C,EAAsDC,KAAtD,IAEA,CAACP,GAAG,CAACC,EAAL,EAASD,GAAG,CAACQ,GAAJ,CAAQ,OAAR,CAAT,EAA2BR,GAAG,CAACQ,GAAJ,CAAQ,aAAR,CAA3B,EAAmDR,GAAG,CAACQ,GAAJ,CAAQ,OAAR,CAAnD,EAAqER,GAAG,CAACQ,GAAJ,CAAQ,YAAR,CAArE,EAA4FR,GAAG,CAACQ,GAAJ,CAAQ,MAAR,CAA5F,EAA6GR,GAAG,CAACQ,GAAJ,CAAQ,OAAR,CAA7G,CAFN;;AAIA,YAAIN,KAAK,KAAKO,SAAV,IAAuBN,WAAW,KAAKM,SAAvC,IAAoDL,KAAK,KAAKK,SAA9D,IAA2EJ,UAAU,KAAKI,SAA1F,IAAuGH,QAAQ,KAAKG,SAApH,IAAiIF,KAAK,KAAKE,SAA/I,EAA2J;AACvJC,UAAAA,OAAO,CAACC,GAAR,CAAYV,EAAZ,EAAeC,KAAf,EAAqBC,WAArB,EAAiCC,KAAjC,EAAuCC,UAAvC,EAAkDC,QAAlD,EAA2DC,KAA3D;AACA,gBAAM,IAAIK,KAAJ,CAAU,+CAAV,CAAN;AACH,SAHD,MAIK;AACD,gBAAMC,OAAO,GAAG,IAAI5B,YAAJ,CAAiBgB,EAAjB,EAAqBC,KAArB,EAA4BC,WAA5B,EAAyCC,KAAzC,EAAgDC,UAAhD,EAA4DC,QAA5D,EAAsEC,KAAtE,CAAhB;AACA,eAAKhB,WAAL,CAAiBuB,OAAjB,CAAyBD,OAAzB;AACH;;AACDH,QAAAA,OAAO,CAACC,GAAR,CAAa;AAACV,UAAAA,EAAE,EAAED,GAAG,CAACC,EAAT;AAAa,aAAGD,GAAG,CAACL,IAAJ;AAAhB,SAAb;AACL,OAfM,CAAP;AAeG,KAhBL;AAiBC;;AAnCY;;AAAXR,U,CACWM,Q;AAqCjB,eAAeN,UAAf","sourcesContent":["import {collection, doc, Firestore, getDocs, getFirestore} from 'firebase/firestore';\r\nimport { stringify } from 'querystring';\r\nimport Category from '../dataTypes/category';\r\nimport ItemShowcase from '../dataTypes/itemShowcase';\r\nimport { ItemHandler } from './item';\r\n\r\nclass DataLoader {\r\n  private static instance: DataLoader;\r\n  db: Firestore = getFirestore();\r\n  itemCollection = collection(this.db,\"items\");\r\n\r\n  itemHandler: ItemHandler = ItemHandler.getInstance();\r\n\r\n  private constructor() { }\r\n\r\n  public static getInstance(): DataLoader {\r\n    if (!DataLoader.instance) {\r\n        DataLoader.instance = new DataLoader();\r\n    }\r\n    return DataLoader.instance;\r\n  }\r\n\r\n  loadData(): void {\r\n    let data = [];\r\n    getDocs(this.itemCollection).then(snapshot => {\r\n      data = snapshot.docs.map(doc => {\r\n            //Destructuring\r\n            const [id, title, description, price, pictureUrl, category, stock]: \r\n                  [string, string | undefined, string | undefined, number | undefined, string | undefined, Category | undefined, number | undefined] =\r\n                  [doc.id, doc.get(\"title\"), doc.get(\"description\"), doc.get(\"price\"), doc.get(\"pictureUrl\"), doc.get(\"type\"), doc.get(\"stock\")]\r\n            \r\n            if (title === undefined || description === undefined || price === undefined || pictureUrl === undefined || category === undefined || stock === undefined ) {\r\n                console.log(id,title,description,price,pictureUrl,category,stock)\r\n                throw new Error(\"Parámetros de items de base de datos erroneos\");\r\n            }\r\n            else {\r\n                const newItem = new ItemShowcase(id, title, description, price, pictureUrl, category, stock);\r\n                this.itemHandler.addItem(newItem);\r\n            }\r\n            console.log ({id: doc.id, ...doc.data()})\r\n      })})\r\n    }\r\n}\r\n\r\nexport default DataLoader;\r\n\r\n"]},"metadata":{},"sourceType":"module"}