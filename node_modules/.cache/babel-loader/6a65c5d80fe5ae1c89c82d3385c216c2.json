{"ast":null,"code":"import { getFlavor, getFlavors } from '../data/flavors';\nimport { obtenerHelado, obtenerHelados } from '../data/item';\n\n/* \r\n * Uses getItems to query i from \"Database\".\r\n * After 2 seconds, i gets resolved.\r\n * Then, setItems is used with i.\r\n * Finally *laughs in asynchronous*, the promise gets returned.\r\n */\nconst getPromiseAux = (setItems, getItems) => {\n  const itemsPromise = new Promise((resolve, reject) => {\n    const itemsDB = getItems();\n    setTimeout(() => {\n      resolve(itemsDB);\n    }, 2000);\n  }).then(result => {\n    setItems(result);\n  }).catch(err => {\n    console.error(err);\n  });\n  return itemsPromise;\n};\n/* Items */\n\n\nconst getItems = setItems => {\n  return getPromiseAux(setItems, obtenerHelados);\n};\n\nconst getFilteredItems = (itemFilter, setItems) => {\n  const setItemsWithFilter = items => setItems(items.filter(itemFilter));\n\n  return getPromiseAux(setItemsWithFilter, obtenerHelados);\n};\n\nconst getItem = (itemId, setItem) => {\n  const getItemsAux = () => obtenerHelado(itemId);\n\n  return getPromiseAux(setItem, getItemsAux);\n};\n/* Flavors */\n\n\nconst getPromiseFlavors = setItems => {\n  return getPromiseAux(setItems, getFlavors);\n};\n\nconst getPromiseFlavor = (itemId, setItem) => {\n  const getFlavorsAux = () => getFlavor(itemId);\n\n  return getPromiseAux(setItem, getFlavorsAux);\n};\n\nexport { getItems, getItem, getFilteredItems, getPromiseFlavors, getPromiseFlavor };","map":{"version":3,"sources":["F:/reactApp/heladeria-e-commerce-baladon/src/helpers/promises.ts"],"names":["getFlavor","getFlavors","obtenerHelado","obtenerHelados","getPromiseAux","setItems","getItems","itemsPromise","Promise","resolve","reject","itemsDB","setTimeout","then","result","catch","err","console","error","getFilteredItems","itemFilter","setItemsWithFilter","items","filter","getItem","itemId","setItem","getItemsAux","getPromiseFlavors","getPromiseFlavor","getFlavorsAux"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,iBAAtC;AACA,SAAQC,aAAR,EAAuBC,cAAvB,QAA4C,cAA5C;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,CAACC,QAAD,EAA4BC,QAA5B,KAAkE;AACtF,QAAMC,YAAY,GAAG,IAAIC,OAAJ,CAAiB,CAACC,OAAD,EAASC,MAAT,KAAoB;AACxD,UAAMC,OAAY,GAAGL,QAAQ,EAA7B;AACAM,IAAAA,UAAU,CAAC,MAAM;AACfH,MAAAA,OAAO,CAACE,OAAD,CAAP;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GALoB,EAMpBE,IANoB,CAMdC,MAAD,IAAiB;AACrBT,IAAAA,QAAQ,CAACS,MAAD,CAAR;AACD,GARoB,EASpBC,KAToB,CASbC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,GAXoB,CAArB;AAaA,SAAOT,YAAP;AACD,CAfD;AAiBA;;;AAEA,MAAMD,QAAQ,GAAID,QAAD,IAAgD;AAC/D,SAAOD,aAAa,CAACC,QAAD,EAAWF,cAAX,CAApB;AACD,CAFD;;AAIA,MAAMgB,gBAAgB,GAAG,CAACC,UAAD,EAAmCf,QAAnC,KAAkF;AACzG,QAAMgB,kBAAkB,GAAIC,KAAD,IAAyBjB,QAAQ,CAACiB,KAAK,CAACC,MAAN,CAAaH,UAAb,CAAD,CAA5D;;AACA,SAAOhB,aAAa,CAACiB,kBAAD,EAAqBlB,cAArB,CAApB;AACD,CAHD;;AAKA,MAAMqB,OAAO,GAAG,CAACC,MAAD,EAAiBC,OAAjB,KAA6D;AAC3E,QAAMC,WAAW,GAAG,MAAMzB,aAAa,CAACuB,MAAD,CAAvC;;AACA,SAAOrB,aAAa,CAACsB,OAAD,EAAUC,WAAV,CAApB;AACD,CAHD;AAKA;;;AAEA,MAAMC,iBAAiB,GAAIvB,QAAD,IAAkD;AAC1E,SAAOD,aAAa,CAACC,QAAD,EAAWJ,UAAX,CAApB;AACD,CAFD;;AAIA,MAAM4B,gBAAgB,GAAG,CAACJ,MAAD,EAAiBC,OAAjB,KAA+D;AACtF,QAAMI,aAAa,GAAG,MAAM9B,SAAS,CAACyB,MAAD,CAArC;;AACA,SAAOrB,aAAa,CAACsB,OAAD,EAAUI,aAAV,CAApB;AACD,CAHD;;AAOA,SAAQxB,QAAR,EAAkBkB,OAAlB,EAA2BL,gBAA3B,EACQS,iBADR,EAC2BC,gBAD3B","sourcesContent":["import { getFlavor, getFlavors } from '../data/flavors';\r\nimport {obtenerHelado, obtenerHelados} from '../data/item';\r\nimport Flavor from '../dataTypes/flavor';\r\nimport Item from '../dataTypes/item';\r\n\r\n/* \r\n * Uses getItems to query i from \"Database\".\r\n * After 2 seconds, i gets resolved.\r\n * Then, setItems is used with i.\r\n * Finally *laughs in asynchronous*, the promise gets returned.\r\n */\r\nconst getPromiseAux = (setItems: (i: any) => any, getItems: () => any): Promise<any> => {\r\n  const itemsPromise = new Promise<any>((resolve,reject) => {\r\n    const itemsDB: any = getItems();\r\n    setTimeout(() => {\r\n      resolve(itemsDB);\r\n    }, 2000);\r\n  })\r\n  .then((result: any) => {\r\n    setItems(result);\r\n  })\r\n  .catch((err) => {\r\n    console.error(err);\r\n  });\r\n\r\n  return itemsPromise;\r\n}\r\n\r\n/* Items */\r\n\r\nconst getItems = (setItems: (i: Item[]) => any): Promise<any> => {\r\n  return getPromiseAux(setItems, obtenerHelados);\r\n}\r\n\r\nconst getFilteredItems = (itemFilter: (i: Item) => boolean, setItems: (i: Item[]) => any): Promise<any> => {\r\n  const setItemsWithFilter = (items: Item[]): void => setItems(items.filter(itemFilter));\r\n  return getPromiseAux(setItemsWithFilter, obtenerHelados);\r\n}\r\n\r\nconst getItem = (itemId: number, setItem: (i: Item) => any): Promise<any> => {\r\n  const getItemsAux = () => obtenerHelado(itemId);\r\n  return getPromiseAux(setItem, getItemsAux);\r\n}\r\n\r\n/* Flavors */\r\n\r\nconst getPromiseFlavors = (setItems: (i: Flavor[]) => any): Promise<any> => {\r\n  return getPromiseAux(setItems, getFlavors);\r\n}\r\n\r\nconst getPromiseFlavor = (itemId: number, setItem: (i: Flavor) => any): Promise<any> => {\r\n  const getFlavorsAux = () => getFlavor(itemId);\r\n  return getPromiseAux(setItem, getFlavorsAux);\r\n}\r\n\r\n\r\n\r\nexport {getItems, getItem, getFilteredItems,\r\n        getPromiseFlavors, getPromiseFlavor};"]},"metadata":{},"sourceType":"module"}