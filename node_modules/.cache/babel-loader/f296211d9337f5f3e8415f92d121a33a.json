{"ast":null,"code":"var _jsxFileName = \"F:\\\\reactApp\\\\heladeria-e-commerce-baladon\\\\src\\\\components\\\\items\\\\detail\\\\itemChoserContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getFlavors, getNumberOfFlavors } from '../../../data/flavorHandler';\nimport ProductDetailRecipiente from '../../../dataTypes/ProductDetailRecipiente';\nimport ItemChooser from './itemChoser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ItemChoserContainer = _ref => {\n  _s();\n\n  let {\n    id,\n    setProductDetail\n  } = _ref;\n  const [flavors, setFlavors] = useState([]);\n  const [selectedFlavors, setSelectedFlavors] = useState([]);\n  const [numberOfFlavors, setNumberOfFlavors] = useState(0);\n  useEffect(() => {\n    let isMounted = true;\n\n    const setFlavorsIfMounted = flavors => {\n      if (isMounted) setFlavors(flavors);\n    };\n\n    const setAmountIfMounted = amount => {\n      if (isMounted) setNumberOfFlavors(amount);\n    };\n\n    try {\n      getNumberOfFlavors(setAmountIfMounted, id);\n      getFlavors(setFlavorsIfMounted);\n    } catch (err) {\n      if (err instanceof Error) {\n        console.warn(err);\n      }\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [id]); //update details according to flavors showed on screen\n\n  useEffect(() => {\n    //slice passes the value by copy\n    setProductDetail(new ProductDetailRecipiente(selectedFlavors.slice()));\n  }, [selectedFlavors, setProductDetail]);\n  return /*#__PURE__*/_jsxDEV(ItemChooser, {\n    maxFlavors: numberOfFlavors,\n    imgWidth: 500,\n    imgHeight: 500 * 2 / 3,\n    itemId: id,\n    flavors: flavors,\n    selectedFlavors: selectedFlavors,\n    setSelectedFlavors: setSelectedFlavors\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ItemChoserContainer, \"l+ul93/htNBDXXcAYQE5BPw4Nx4=\");\n\n_c = ItemChoserContainer;\nexport default ItemChoserContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemChoserContainer\");","map":{"version":3,"sources":["F:/reactApp/heladeria-e-commerce-baladon/src/components/items/detail/itemChoserContainer.tsx"],"names":["React","useEffect","useState","getFlavors","getNumberOfFlavors","ProductDetailRecipiente","ItemChooser","ItemChoserContainer","id","setProductDetail","flavors","setFlavors","selectedFlavors","setSelectedFlavors","numberOfFlavors","setNumberOfFlavors","isMounted","setFlavorsIfMounted","setAmountIfMounted","amount","err","Error","console","warn","slice"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,kBAArB,QAA+C,6BAA/C;AAGA,OAAOC,uBAAP,MAAoC,4CAApC;AACA,OAAOC,WAAP,MAAwB,cAAxB;;;AAOA,MAAMC,mBAAqC,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAACC,IAAAA,EAAD;AAAKC,IAAAA;AAAL,GAA2B;AACxE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAW,EAAX,CAAtC;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAW,EAAX,CAAtD;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAS,CAAT,CAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,SAAS,GAAG,IAAhB;;AAEA,UAAMC,mBAAmB,GAAIP,OAAD,IAAuB;AACjD,UAAIM,SAAJ,EAAeL,UAAU,CAACD,OAAD,CAAV;AAChB,KAFD;;AAIA,UAAMQ,kBAAkB,GAAIC,MAAD,IAAoB;AAC7C,UAAIH,SAAJ,EAAeD,kBAAkB,CAACI,MAAD,CAAlB;AAChB,KAFD;;AAIA,QAAI;AACFf,MAAAA,kBAAkB,CAACc,kBAAD,EAAqBV,EAArB,CAAlB;AACAL,MAAAA,UAAU,CAACc,mBAAD,CAAV;AACD,KAHD,CAIA,OAAMG,GAAN,EAAgB;AACd,UAAIA,GAAG,YAAYC,KAAnB,EAA0B;AACxBC,QAAAA,OAAO,CAACC,IAAR,CAAaH,GAAb;AACD;AACF;;AAED,WAAO,MAAM;AAACJ,MAAAA,SAAS,GAAG,KAAZ;AAAkB,KAAhC;AACD,GAtBQ,EAsBN,CAACR,EAAD,CAtBM,CAAT,CALwE,CA6BxE;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd;AACAQ,IAAAA,gBAAgB,CAAC,IAAIJ,uBAAJ,CAA4BO,eAAe,CAACY,KAAhB,EAA5B,CAAD,CAAhB;AACD,GAHQ,EAGN,CAACZ,eAAD,EAAkBH,gBAAlB,CAHM,CAAT;AAKA,sBACE,QAAC,WAAD;AACE,IAAA,UAAU,EAAEK,eADd;AAEE,IAAA,QAAQ,EAAE,GAFZ;AAGE,IAAA,SAAS,EAAE,MAAI,CAAJ,GAAM,CAHnB;AAIE,IAAA,MAAM,EAAEN,EAJV;AAKE,IAAA,OAAO,EAAEE,OALX;AAME,IAAA,eAAe,EAAEE,eANnB;AAOE,IAAA,kBAAkB,EAAEC;AAPtB;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA9CD;;GAAMN,mB;;KAAAA,mB;AAgDN,eAAeA,mBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { getFlavors, getNumberOfFlavors } from '../../../data/flavorHandler';\r\nimport Flavor from '../../../dataTypes/flavor';\r\nimport ProductDetail from '../../../dataTypes/ProductDetail';\r\nimport ProductDetailRecipiente from '../../../dataTypes/ProductDetailRecipiente';\r\nimport ItemChooser from './itemChoser'\r\n\r\ninterface IProps {\r\n  id: string;\r\n  setProductDetail(pd: ProductDetail): any;\r\n}\r\n\r\nconst ItemChoserContainer: React.FC<IProps> = ({id, setProductDetail}) => {\r\n  const [flavors, setFlavors] = useState<Flavor[]>([]);\r\n  const [selectedFlavors, setSelectedFlavors] = useState<Flavor[]>([]);\r\n  const [numberOfFlavors, setNumberOfFlavors] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    const setFlavorsIfMounted = (flavors: Flavor[]) => {\r\n      if (isMounted) setFlavors(flavors);\r\n    }\r\n\r\n    const setAmountIfMounted = (amount: number) => {\r\n      if (isMounted) setNumberOfFlavors(amount);\r\n    }\r\n    \r\n    try {\r\n      getNumberOfFlavors(setAmountIfMounted, id);\r\n      getFlavors(setFlavorsIfMounted);\r\n    }\r\n    catch(err: any) {\r\n      if (err instanceof Error) {\r\n        console.warn(err);\r\n      }\r\n    }\r\n    \r\n    return () => {isMounted = false}\r\n  }, [id])\r\n\r\n  //update details according to flavors showed on screen\r\n  useEffect(() => {\r\n    //slice passes the value by copy\r\n    setProductDetail(new ProductDetailRecipiente(selectedFlavors.slice()));\r\n  }, [selectedFlavors, setProductDetail])\r\n\r\n  return (\r\n    <ItemChooser \r\n      maxFlavors={numberOfFlavors}\r\n      imgWidth={500}\r\n      imgHeight={500*2/3}\r\n      itemId={id}\r\n      flavors={flavors}\r\n      selectedFlavors={selectedFlavors}\r\n      setSelectedFlavors={setSelectedFlavors}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ItemChoserContainer"]},"metadata":{},"sourceType":"module"}