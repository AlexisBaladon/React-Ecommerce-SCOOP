{"ast":null,"code":"import { collection, doc, getDoc, getDocs, getFirestore, orderBy, query, where } from 'firebase/firestore';\nimport ItemShowcase from '../dataTypes/itemShowcase';\n\nconst createItemAux = document => {\n  let newItem = null; //Destructuring\n\n  const [id, title, description, price, pictureUrl, category, stock] = [document.id, document.get(\"title\"), document.get(\"description\"), document.get(\"price\"), document.get(\"pictureUrl\"), document.get(\"type\"), document.get(\"stock\")]; //If items are well defined\n\n  if (title === undefined || description === undefined || price === undefined || pictureUrl === undefined || category === undefined || stock === undefined) {\n    console.log(id, title, description, price, pictureUrl, category, stock);\n    throw new Error(\"Par치metros de items de base de datos err칩neos\");\n  } else {\n    newItem = new ItemShowcase(id, title, description, price, pictureUrl, category, stock);\n  }\n\n  console.log(newItem);\n  return newItem;\n};\n\nconst getItem = (itemId, setItem) => {\n  const db = getFirestore();\n  const itemRef = doc(db, \"items\", itemId);\n  getDoc(itemRef).then(snapshot => {\n    if (snapshot.exists()) {\n      const item = createItemAux(snapshot);\n      setItem(item);\n    } else {\n      throw new Error(\"El item buscado no existe en la base de datos\");\n    }\n  });\n};\n\nconst getItems = setItems => {\n  const db = getFirestore();\n  const itemCollection = query(collection(db, \"items\"), orderBy(\"type\"));\n  getDocs(itemCollection).then(snapshot => {\n    const newItems = snapshot.docs.map(doc => {\n      return createItemAux(doc);\n    });\n    setItems(newItems);\n  });\n};\n\nconst getItemsByCategory = (category, setItems) => {\n  const db = getFirestore();\n  const itemCollection = query(collection(db, \"items\"), where(\"type\", \"==\", category));\n  getDocs(itemCollection).then(snapshot => {\n    const newItems = snapshot.docs.map(doc => {\n      return createItemAux(doc);\n    });\n    setItems(newItems);\n  });\n};\n\nexport { getItem, getItems, getItemsByCategory };","map":{"version":3,"sources":["F:/reactApp/heladeria-e-commerce-baladon/src/data/itemHandler.ts"],"names":["collection","doc","getDoc","getDocs","getFirestore","orderBy","query","where","ItemShowcase","createItemAux","document","newItem","id","title","description","price","pictureUrl","category","stock","get","undefined","console","log","Error","getItem","itemId","setItem","db","itemRef","then","snapshot","exists","item","getItems","setItems","itemCollection","newItems","docs","map","getItemsByCategory"],"mappings":"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","sourcesContent":["import {collection, doc, DocumentData, DocumentSnapshot, Firestore, getDoc, getDocs, getFirestore, orderBy, query, where} from 'firebase/firestore';\r\nimport Category from '../dataTypes/category';\r\nimport ItemShowcase from '../dataTypes/itemShowcase';\r\n\r\nconst createItemAux = (document: DocumentSnapshot<DocumentData>): ItemShowcase => {\r\n  let newItem = null;\r\n\r\n  //Destructuring\r\n  const [id, title, description, price, pictureUrl, category, stock]: \r\n  [string, string | undefined, string | undefined, number | undefined, string | undefined, Category | undefined, number | undefined] =\r\n  [document.id, document.get(\"title\"), document.get(\"description\"), document.get(\"price\"), document.get(\"pictureUrl\"), document.get(\"type\"), document.get(\"stock\")]\r\n\r\n  //If items are well defined\r\n  if (title === undefined || description === undefined || price === undefined || pictureUrl === undefined || category === undefined || stock === undefined ) {\r\n  console.log(id,title,description,price,pictureUrl,category,stock)\r\n  throw new Error(\"Par치metros de items de base de datos err칩neos\");\r\n  }\r\n  else {\r\n    newItem = new ItemShowcase(id, title, description, price, pictureUrl, category, stock);\r\n  }\r\n  console.log(newItem)\r\n  return newItem;\r\n}\r\n\r\nconst getItem = (itemId: string, setItem: (item: ItemShowcase) => void): void => {\r\n  const db = getFirestore()\r\n  const itemRef = doc(db, \"items\", itemId);\r\n\r\n  getDoc(itemRef).then(snapshot => {\r\n    if (snapshot.exists()) {\r\n      const item = createItemAux(snapshot);\r\n      setItem(item);\r\n    }\r\n    else {\r\n      throw new Error(\"El item buscado no existe en la base de datos\")\r\n    }\r\n  })\r\n}\r\n\r\nconst getItems = (setItems: (item: ItemShowcase[]) => void): void => {\r\n  const db = getFirestore()\r\n  const itemCollection = query(collection(db,\"items\"),orderBy(\"type\"));\r\n\r\n  getDocs(itemCollection).then(snapshot => {\r\n    const newItems = snapshot.docs.map(doc => {\r\n      return createItemAux(doc);\r\n    })\r\n    setItems(newItems);\r\n  })\r\n}\r\n\r\nconst getItemsByCategory = (category: Category, setItems: (item: ItemShowcase[]) => void): void => {\r\n  const db = getFirestore()\r\n  const itemCollection = query(collection(db,\"items\"),where(\"type\",\"==\",category));\r\n\r\n  getDocs(itemCollection).then(snapshot => {\r\n    const newItems = snapshot.docs.map(doc => {\r\n      return createItemAux(doc);\r\n    })\r\n    setItems(newItems);\r\n  })\r\n}\r\n\r\nexport {getItem,getItems,getItemsByCategory};\r\n\r\n"]},"metadata":{},"sourceType":"module"}