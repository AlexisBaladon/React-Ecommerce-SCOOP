{"ast":null,"code":"var _jsxFileName = \"F:\\\\reactApp\\\\heladeria-e-commerce-baladon\\\\src\\\\components\\\\items\\\\itemList.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Item from './item';\nimport { obtenerHelados } from '../../data/helados';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ItemList = () => {\n  _s();\n\n  const onAdd = (num, setNum) => setNum(num + 1);\n\n  const onSub = (num, setNum) => setNum(num - 1);\n\n  const initial = 0;\n  const [helados, setHelados] = useState([]);\n\n  const obtenerPromiseHelados = () => {\n    const helados = obtenerHelados();\n    const heladosPromise = new Promise((resolve, reject) => {\n      if (helados.length === 0) {\n        throw new Error('No se han encontrado helados!');\n      }\n\n      setTimeout(() => {\n        resolve(helados);\n      }, 2000);\n    });\n    return heladosPromise;\n  };\n\n  const promiseHelados = obtenerPromiseHelados();\n  promiseHelados.then(result => {\n    setHelados(result);\n    console.log('Helados: ' + helados);\n  }).catch(err => {\n    console.log(err);\n  }).finally(() => {\n    console.log('Fin de promesa de helados!');\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", helados.map(h => /*#__PURE__*/_jsxDEV(Item, {\n      item: h,\n      setSelectedItem: null,\n      onClick: () => {},\n      initial: initial,\n      onAdd: onAdd,\n      onSub: onSub\n    }, h.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this))]\n  }, void 0, true);\n};\n\n_s(ItemList, \"WwLQYITH1d4Z/X/z3FEBIJevKKA=\");\n\n_c = ItemList;\nexport default ItemList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemList\");","map":{"version":3,"sources":["F:/reactApp/heladeria-e-commerce-baladon/src/components/items/itemList.tsx"],"names":["useState","Item","obtenerHelados","ItemList","onAdd","num","setNum","onSub","initial","helados","setHelados","obtenerPromiseHelados","heladosPromise","Promise","resolve","reject","length","Error","setTimeout","promiseHelados","then","result","console","log","catch","err","finally","map","h","id"],"mappings":";;;AAAA,SAA4BA,QAA5B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,cAAR,QAAoD,oBAApD;;;;AAGA,MAAMC,QAA2B,GAAG,MAAM;AAAA;;AACxC,QAAMC,KAAK,GAAG,CAACC,GAAD,EAAcC,MAAd,KAAuDA,MAAM,CAACD,GAAG,GAAG,CAAP,CAA3E;;AACA,QAAME,KAAK,GAAG,CAACF,GAAD,EAAcC,MAAd,KAAuDA,MAAM,CAACD,GAAG,GAAG,CAAP,CAA3E;;AACA,QAAMG,OAAe,GAAG,CAAxB;AAEA,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBV,QAAQ,CAAW,EAAX,CAArC;;AAEA,QAAMW,qBAAqB,GAAG,MAAyB;AACrD,UAAMF,OAAiB,GAAGP,cAAc,EAAxC;AACA,UAAMU,cAAc,GAAG,IAAIC,OAAJ,CAAsB,CAACC,OAAD,EAASC,MAAT,KAAoB;AAC/D,UAAIN,OAAO,CAACO,MAAR,KAAmB,CAAvB,EAA0B;AACxB,cAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACDC,MAAAA,UAAU,CAAC,MAAM;AACfJ,QAAAA,OAAO,CAACL,OAAD,CAAP;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KAPsB,CAAvB;AAQA,WAAOG,cAAP;AACD,GAXD;;AAaA,QAAMO,cAAc,GAAGR,qBAAqB,EAA5C;AAEAQ,EAAAA,cAAc,CACdC,IADA,CACMC,MAAD,IAAsB;AACzBX,IAAAA,UAAU,CAACW,MAAD,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcd,OAA1B;AACD,GAJD,EAKCe,KALD,CAKQC,GAAD,IAAS;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,GAPD,EAQCC,OARD,CAQS,MAAM;AACbJ,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,GAVD;AAaA,sBAAO;AAAA,oBACLd,OAAO,CAACkB,GAAR,CAAYC,CAAC,iBACX,QAAC,IAAD;AAEE,MAAA,IAAI,EAAIA,CAFV;AAGE,MAAA,eAAe,EAAI,IAHrB;AAIE,MAAA,OAAO,EAAE,MAAI,CAAE,CAJjB;AAKE,MAAA,OAAO,EAAIpB,OALb;AAME,MAAA,KAAK,EAAIJ,KANX;AAOE,MAAA,KAAK,EAAIG;AAPX,OACOqB,CAAC,CAACC,EADT;AAAA;AAAA;AAAA;AAAA,YADF,CADK;AAAA,kBAAP;AAaD,CAhDD;;GAAM1B,Q;;KAAAA,Q;AAkDN,eAAeA,QAAf","sourcesContent":["import { FunctionComponent, useState } from 'react';\r\nimport Item from './item';\r\nimport {obtenerHelados, obtenerHeladosPromise} from '../../data/helados';\r\nimport Helado from '../../dataTypes/helado';\r\n\r\nconst ItemList: FunctionComponent = () => {\r\n  const onAdd = (num: number, setNum: React.Dispatch<number>): void => setNum(num + 1);\r\n  const onSub = (num: number, setNum: React.Dispatch<number>): void => setNum(num - 1);\r\n  const initial: number = 0;\r\n\r\n  const [helados,setHelados] = useState<Helado[]>([]);\r\n\r\n  const obtenerPromiseHelados = (): Promise<Helado[]> => {\r\n    const helados: Helado[] = obtenerHelados();\r\n    const heladosPromise = new Promise<Helado[]>((resolve,reject) => {\r\n      if (helados.length === 0) {\r\n        throw new Error('No se han encontrado helados!');\r\n      }\r\n      setTimeout(() => {\r\n        resolve(helados);\r\n      }, 2000);\r\n    })\r\n    return heladosPromise;\r\n  }\r\n\r\n  const promiseHelados = obtenerPromiseHelados();\r\n  \r\n  promiseHelados.\r\n  then((result: Helado[]) => {\r\n    setHelados(result);\r\n    console.log('Helados: ' + helados);\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  })\r\n  .finally(() => {\r\n    console.log('Fin de promesa de helados!');\r\n  });\r\n\r\n\r\n  return <> {\r\n    helados.map(h =>\r\n      <Item \r\n        key={h.id} \r\n        item = {h}\r\n        setSelectedItem = {null}\r\n        onClick={()=>{}}\r\n        initial = {initial}\r\n        onAdd = {onAdd}\r\n        onSub = {onSub}\r\n      />\r\n    )}\r\n  </>\r\n}\r\n\r\nexport default ItemList;"]},"metadata":{},"sourceType":"module"}